{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\remote-react-project\\\\src\\\\Account1.js\";\nimport React from 'react';\nimport './style.css'; //Test to retrieve data from headless API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Account1 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      accountBalance: null,\n      accountNumber: null\n    };\n  }\n\n  componentDidMount() {\n    fetch('/o/c/bankaccounts/42744', {\n      method: 'GET',\n      headers: {\n        Authorization: 'Basic ' + btoa('test@liferay.com:test'),\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        accountBalance: result.accountBalance,\n        accountNumber: result.accountNumber\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      accountBalance,\n      accountNumber\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [accountNumber, \" $\", accountBalance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n}\n\nexport default Account1;","map":{"version":3,"sources":["C:/react/remote-react-project/src/Account1.js"],"names":["React","Account1","Component","constructor","props","state","error","isLoaded","accountBalance","accountNumber","componentDidMount","fetch","method","headers","Authorization","btoa","then","res","json","result","setState","render","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP,C,CAEA;;;;AAEA,MAAMC,QAAN,SAAuBD,KAAK,CAACE,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,cAAc,EAAE,IAHL;AAIXC,MAAAA,aAAa,EAAE;AAJJ,KAAb;AAMD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,yBAAD,EAA4B;AAC/BC,MAAAA,MAAM,EAAE,KADuB;AAE/BC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,WAAWC,IAAI,CAAC,uBAAD,CADvB;AAEP,wBAAgB;AAFT;AAFsB,KAA5B,CAAL,CAMGC,IANH,CAMQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANf,EAOGF,IAPH,CAQKG,MAAD,IAAY;AACV,WAAKC,QAAL,CAAc;AACZb,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,cAAc,EAAEW,MAAM,CAACX,cAFX;AAGZC,QAAAA,aAAa,EAAEU,MAAM,CAACV;AAHV,OAAd;AAKD,KAdL,EAeI;AACA;AACA;AACCH,IAAAA,KAAD,IAAW;AACT,WAAKc,QAAL,CAAc;AACZb,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA;AAFY,OAAd;AAID,KAvBL;AAyBD;;AAEDe,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEf,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,cAAnB;AAAmCC,MAAAA;AAAnC,QAAoD,KAAKJ,KAA/D;;AACA,QAAIC,KAAJ,EAAW;AACT,0BAAO;AAAA,8BAAaA,KAAK,CAACgB,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO,IAAI,CAACf,QAAL,EAAe;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFM,MAEA;AACL,0BAEM;AAAA,mBAAKE,aAAL,QAAsBD,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFN;AAID;AACF;;AAnDoC;;AAsDvC,eAAeP,QAAf","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\n//Test to retrieve data from headless API\r\n\r\nclass Account1 extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      accountBalance: null,\r\n      accountNumber: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('/o/c/bankaccounts/42744', {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: 'Basic ' + btoa('test@liferay.com:test'),\r\n        'Content-Type': 'application/json'\r\n      }})\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            accountBalance: result.accountBalance,\r\n            accountNumber: result.accountNumber\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, accountBalance, accountNumber} = this.state;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n\r\n            <h2>{accountNumber} ${accountBalance}</h2>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Account1;"]},"metadata":{},"sourceType":"module"}